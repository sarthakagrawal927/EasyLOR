datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  PENDING
  GRANTED
  REJECTED
}

enum UserType {
  STUDENT
  FACULTY
}

model LORApplication {
  id                 Int      @id @default(autoincrement())
  dueDate            DateTime
  statementOfPurpose String
  course             String
  university         String
  draftURL           String
  studentID          Int
  facultyID          Int
  status             Status   @default(PENDING)

  student Student @relation(fields: [studentID], references: [userID])
  faculty Faculty @relation(fields: [facultyID], references: [userID])
  @@unique([studentID, facultyID])
}

model Reminder {
  id        Int     @id @default(autoincrement())
  message   String
  facultyID Int
  studentID Int
  viewed    Boolean

  student Student @relation(fields: [studentID], references: [userID])
  faculty Faculty @relation(fields: [facultyID], references: [userID])
  @@unique([studentID, facultyID])
}

model TestScore {
  id    Int    @id @default(autoincrement())
  exam  String
  score String

  student   Student @relation(fields: [studentID], references: [userID])
  studentID Int
  @@unique([exam, score])
}

model Department {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  password     String
  firstName    String
  lastName     String?
  institution  String
  contact      String     @unique
  profilePhoto String     @unique
  Student      Student[]
  Faculty      Faculty[]
  department   Department @relation(fields: [departmentID], references: [id])
  departmentID Int
  userType     UserType
}

model Student {
  user                 User             @relation(fields: [userID], references: [id])
  userID               Int              @id
  regNo                String           @unique
  appliedUniversities  String[]
  acceptedUniversities String[]
  testScores           TestScore[]
  lorApplications      LORApplication[]
  reminders            Reminder[]
}

model Faculty {
  user              User             @relation(fields: [userID], references: [id])
  userID            Int              @id
  lorApplications   LORApplication[]
  lorDraftTemplates String[]
  reminders          Reminder[]
}
