datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  PENDING
  GRANTED
  REJECTED
}

enum UserType {
  STUDENT
  FACULTY
}

model LORApplication {
  id                 String    @id @default(uuid())
  dueDate            DateTime?
  statementOfPurpose String
  course             String
  university         String
  draftURL           String?
  studentID          String
  facultyID          String
  status             Status    @default(PENDING)
  rejectionReason    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentID], references: [userID])
  faculty Faculty @relation(fields: [facultyID], references: [userID])
  @@unique([studentID, facultyID])
}

model Reminder {
  id        String  @id @default(uuid())
  message   String
  facultyID String
  studentID String
  viewed    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentID], references: [userID])
  faculty Faculty @relation(fields: [facultyID], references: [userID])
  @@unique([studentID, facultyID])
}

model TestScore {
  id            String @id @default(uuid())
  exam          String
  score         String
  proofOfResult String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student @relation(fields: [studentID], references: [userID])
  studentID String
  @@unique([exam, studentID])
}

model Department {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  password     String
  firstName    String
  lastName     String?
  institution  String
  contact      String     @unique
  profilePhoto String     @unique
  student      Student?
  faculty      Faculty?
  department   Department @relation(fields: [departmentID], references: [id])
  departmentID String
  userType     UserType   @default(STUDENT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  user                User             @relation(fields: [userID], references: [id])
  userID              String           @id
  regNo               String           @unique
  appliedUniversities String[]
  acceptedUniversity  String?
  proofOfAcceptance   String?
  testScores          TestScore[]
  lorApplications     LORApplication[]
  reminders           Reminder[]
}

model Faculty {
  user              User             @relation(fields: [userID], references: [id])
  userID            String           @id
  lorApplications   LORApplication[]
  lorDraftTemplates String[]
  reminders         Reminder[]
}
